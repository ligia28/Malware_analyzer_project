from django.shortcuts import render
from django.http import HttpResponse
from django.core.files.storage import FileSystemStorage
from index_pool.models import *
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from index_pool.functions import *
from django.db import IntegrityError
from datetime import datetime
from django.views.decorators.csrf import csrf_exempt
import json
# Create your views here.


def index(request):
    context = Malware.objects.all()
    return render(request,'index_pool/index.html',{"context":context})


def get_all_malware_info(request):
    if request.is_ajax and request.method=="POST":
        data=json.loads(request.body.decode('utf-8'))
        hash = data['hash']
        mw = Malware.objects.get(mw_sha256=hash)
        return JsonResponse({'error':False,'header':mw.mw_headers_strings,'yara':mw.yara_rules})
    return JsonResponse({'true':False,'message':"Error getting info."})


def fill_div_content_mw(request):
    mw = Malware.objects.all()
    string=""
    for iterator in mw:
        string+="<li class = 'collection-item avatar'>"
        string+="<img alt = 'Status' src = '/html5/images/html5-mini-logo.jpg' class = 'circle'>"
        string+="<span class = 'title'><b>Name:</b> "+str(iterator.mw_name)+"</span>"
        string+="<p><b>Hash:</b>"+str(iterator.mw_sha256)+"</p>"
        string+="<p><b>Upload time:</b>"+str(iterator.mw_creation_date)+"</p>"
        if iterator.mw_score>=4:
            string+="<p style='color:red'><b>Score:</b>"+str(iterator.mw_score)+"</p>"
        else:
            string+="<p>"+str(iterator.mw_score)+"</p>"
        string+="<a class='btn-floating btn-large waves-effect waves-light red button_show_mw_details' id='"+str(iterator.mw_sha256)+"' style='margin-left:95%;'><i class='material-icons'>add</i></a>"
        string+="</li>"
    return JsonResponse({'error':False,'context': string})

def upload(request):
    if request.user.is_authenticated:
        print("este autentificat")
    else:
        print("nu este autentificat")

    context={}
    if request.method=='POST':
        uploaded_file=request.FILES['document']
        fs=FileSystemStorage()
        name=fs.save(uploaded_file.name,uploaded_file)
        context['url']=fs.url(name)
        sha = make_sha(uploaded_file.name)
        string, score1, compiled_time=get_static_info_from_header(uploaded_file.name)
        image_path,var,sk,kur,en,y_pred=transform_to_image(uploaded_file.name)
        yara, score2 = apply_yara_rules(uploaded_file.name)
        score=score1+score2
        now=datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")


        string+="<div class='malware_analyzer_on_image'><img src='"+str("/static/img1/"+uploaded_file.name+".png")+"' style='width:200px;height:200px;'/><br>"
        string+="<span style='color:red;'>File is classified by image processing algorithm (1 is malware 0 is clean file): "+str(y_pred)+"</span>"
        string+="</div>"
        try:
            current_user=request.user
            mw = Malware(mw_name=uploaded_file.name,mw_sha256=sha,mw_creation_date=dt_string,mw_date_compiled=compiled_time,mw_headers_strings=string,user_email=current_user.email,user_username=current_user.username,mw_score=score,yara_rules=yara,image_path=image_path,mw_variance=float(var),
        mw_skewness=float(sk),mw_kurtosis=float(kur),mw_entropy=float(en),mw_score_image=int(y_pred))
            mw.save()
        except IntegrityError:
            return JsonResponse({'error':False,'message':'Malicious file, '+sha+' is already in our database.'})

        return JsonResponse({'error':False,'message':'Uploaded Successfully'})
    return render(request,'index_pool/upload.html',context)
